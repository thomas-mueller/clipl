Setup:
 Check the basic environment:
  >>> import sys
  >>> if sys.version_info<(2,7): raise KeyboardInterrupt
  >>> import logger


User Functions:
 Print to stdout/stderr
  >>> logger.vprint # doctest: +ELLIPSIS
  <function vprint at 0x...>
  >>> logger.eprint # doctest: +ELLIPSIS
  <function eprint at 0x...>
  
 Print one or several objects to stdout/stderr
  >>> logger.vprint('out')
  out
  >>> logger.eprint('Hello from Doctest (via stderr)') # doctest does not capture stderr
  
  >>> logger.vprint(['one', 'two', object()]) # doctest: +ELLIPSIS
  one two <object object at 0x...>
  
 Use different separator in lists
  >>> logger.vprint(['one', 'two', object()], sep=',') # doctest: +ELLIPSIS
  one,two,<object object at 0x...>


Argparser Interfaces:
 There is a default parser and the option to recreate it:
  >>> logger.loggingParser != None
  True
  >>> logger.getLoggingParser() != None
  True
 
Initialization:
 Configure the module and receive the root Logger, or configure subportions: # This is optional
  >>> logger.configureModule() # doctest: +ELLIPSIS
  <logging.RootLogger object at 0x...>
  >>> logger.initLogger() # doctest: +ELLIPSIS
  <logging.RootLogger object at 0x...>
  >>> logger.configurePrints()
  
 Configuration can be done using the argparser...
  >>> logger.configureModule(logger.loggingParser.parse_args('')) # doctest: +ELLIPSIS
  <logging.RootLogger object at 0x...>
  >>> logger.initLogger(logger.loggingParser.parse_args('')) # doctest: +ELLIPSIS
  <logging.RootLogger object at 0x...>
  >>> logger.configurePrints(logger.loggingParser.parse_args(''))

 ...or using corresponding default notation...
  >>> logger.initLogger(name = 'test').name
  'test'
  >>> logger.initLogger(logLevel = 'info').getEffectiveLevel()
  20
 
 ...logging has a default handler if none is specified...
  >>> len(logger.initLogger().handlers)
  1
  >>> len(logger.initLogger(logStream = 'stderr').handlers)
  1
  >>> len(logger.initLogger(logFiles = ['file1','file2'], logStream = 'stdout').handlers)
  3
  
 ...print configuration directly takes argparse Namespace notation...
  >>> logger.configurePrints(verbose=True)
  >>> logger.configurePrints(verbose=False)
  >>> logger.configurePrints(out_level='info', err_level='debug')
  >>> logger.configurePrints(verbose=False, out_level='info', err_level='debug')
  
 ...module configuration combines the two using dictionaries
  >>> logger.configureModule( printKWArgs={'verbose':False, 'out_level':'info', 'err_level':'debug'}) # doctest: +ELLIPSIS
  <logging.RootLogger object at 0x...>
  >>> logger.configureModule( logKWArgs={'name' : 'test', 'logLevel' : 'info', 'logFiles' : ['file1','file2'], 'logStream' : 'stdout' })  #	doctest: +ELLIPSIS
  <logging.Logger object at 0x...>

Lower-Level Objects:
  >>> logger.LevelDependentFormatter
  <class 'logger.LevelDependentFormatter'>



That's it... should clean up some files
  >>> import os
  >>> os.remove('file1')
  >>> os.remove('file2')
